import { loadConfig } from './config';
import { GitLabClient } from './services/gitlab';
import { AIReviewer } from './services/reviewer';
import { parseMergeRequestUrl } from './utils/parser';
import { Logger } from './utils/logger';
import { getReviewMetadata } from './utils/network';
import { ReviewResult } from './types';

export interface ReviewOptions {
  mrUrl: string;
  postComment?: boolean;
  outputFormat?: 'text' | 'json';
}

/**
 * Main function to review a GitLab merge request
 */
export async function reviewMergeRequest(
  options: ReviewOptions
): Promise<ReviewResult> {
  try {
    // Load configuration
    const config = loadConfig();

    // Parse the MR URL
    const { projectPath, mrIid } = parseMergeRequestUrl(options.mrUrl);
    Logger.info(`Reviewing MR #${mrIid} in project: ${projectPath}`);

    // Initialize clients
    const gitlabClient = new GitLabClient(config);
    const aiReviewer = new AIReviewer(config);

    // Fetch MR information
    Logger.info('Fetching merge request details...');
    const mrInfo = await gitlabClient.getMergeRequest(projectPath, mrIid);

    // Fetch MR changes
    Logger.info('Fetching code changes...');
    const changes = await gitlabClient.getMergeRequestChanges(projectPath, mrIid);

    Logger.info(`Found ${changes.length} changed file(s)`);

    // Perform AI review
    const reviewResult = await aiReviewer.reviewChanges(mrInfo, changes);

    // Post comment if requested
    if (options.postComment) {
      Logger.info('Posting review as comment...');
      const formattedComment = formatReviewAsComment(reviewResult);
      await gitlabClient.postComment(projectPath, mrIid, formattedComment);
    }

    return reviewResult;
  } catch (error: any) {
    Logger.error('Review failed', error);
    throw error;
  }
}

/**
 * Format review result as a GitLab comment
 */
function formatReviewAsComment(review: ReviewResult): string {
  let comment = '## AI Code Review\n\n';

  comment += `### Summary\n${review.summary}\n\n`;

  if (review.comments.length > 0) {
    comment += '### Detailed Feedback\n\n';
    for (const item of review.comments) {
      const emoji = getSeverityEmoji(item.severity);
      const location = item.lineNumber
        ? `\`${item.filePath}:${item.lineNumber}\``
        : `\`${item.filePath}\``;

      comment += `- ${emoji} **${item.severity.toUpperCase()}** ${location}: ${item.comment}\n`;
    }
    comment += '\n';
  }

  comment += `### Overall Assessment\n${review.overallAssessment}\n\n`;
  comment += '---\n';
  comment += `*Review generated by AI-powered reviewbot*\n\n`;
  comment += `_${getReviewMetadata()}_\n`;

  return comment;
}

/**
 * Get emoji for severity level
 */
function getSeverityEmoji(severity: string): string {
  const emojiMap: Record<string, string> = {
    critical: 'üî¥',
    warning: 'üü°',
    suggestion: 'üí°',
    info: '‚ÑπÔ∏è',
  };
  return emojiMap[severity] || '‚ÑπÔ∏è';
}
