import { getLLMInfo, getReviewMetadata } from '../../src/utils/metadata';
import { Config } from '../../src/types';

describe('Metadata Utilities', () => {
  describe('getLLMInfo', () => {
    it('should return Anthropic Claude info for anthropic provider', () => {
      const config: Config = {
        llmProvider: 'anthropic',
        anthropicApiKey: 'test-key',
        reviewLanguage: 'english',
      };

      const info = getLLMInfo(config);

      expect(info).toBe('Anthropic Claude (claude-sonnet-4-20250514)');
    });

    it('should return Ollama info with default model', () => {
      const config: Config = {
        llmProvider: 'ollama',
        ollamaEndpoint: 'http://localhost:11434',
        reviewLanguage: 'english',
      };

      const info = getLLMInfo(config);

      expect(info).toBe('Ollama (unknown)');
    });

    it('should return Ollama info with gemma3 model', () => {
      const config: Config = {
        llmProvider: 'ollama',
        ollamaEndpoint: 'http://localhost:11434',
        ollamaModel: 'gemma3:4b',
        reviewLanguage: 'english',
      };

      const info = getLLMInfo(config);

      expect(info).toBe('Ollama (gemma3:4b)');
    });

    it('should return Ollama info with llama2 model', () => {
      const config: Config = {
        llmProvider: 'ollama',
        ollamaEndpoint: 'http://localhost:11434',
        ollamaModel: 'llama2:13b',
        reviewLanguage: 'english',
      };

      const info = getLLMInfo(config);

      expect(info).toBe('Ollama (llama2:13b)');
    });

    it('should return Ollama info with mistral model', () => {
      const config: Config = {
        llmProvider: 'ollama',
        ollamaEndpoint: 'http://localhost:11434',
        ollamaModel: 'mistral:7b',
        reviewLanguage: 'english',
      };

      const info = getLLMInfo(config);

      expect(info).toBe('Ollama (mistral:7b)');
    });

    it('should return provider name for unknown provider', () => {
      const config: Config = {
        llmProvider: 'unknown' as any,
        reviewLanguage: 'english',
      };

      const info = getLLMInfo(config);

      expect(info).toBe('unknown');
    });
  });

  describe('getReviewMetadata', () => {
    beforeEach(() => {
      // Mock Date to ensure consistent timestamps in tests
      jest.useFakeTimers();
      jest.setSystemTime(new Date('2025-01-15T10:30:45.123Z'));
    });

    afterEach(() => {
      jest.useRealTimers();
    });

    it('should generate complete metadata for Anthropic', () => {
      const config: Config = {
        llmProvider: 'anthropic',
        anthropicApiKey: 'test-key',
        reviewLanguage: 'english',
      };

      const metadata = getReviewMetadata(config);

      expect(metadata).toMatch(/^Review generated by Anthropic Claude \(claude-sonnet-4-20250514\) • reviewbot v\d+\.\d+\.\d+ • 2025-01-15T10:30:45\.123Z$/);
    });

    it('should generate complete metadata for Ollama', () => {
      const config: Config = {
        llmProvider: 'ollama',
        ollamaEndpoint: 'http://localhost:11434',
        ollamaModel: 'gemma3:4b',
        reviewLanguage: 'english',
      };

      const metadata = getReviewMetadata(config);

      expect(metadata).toMatch(/^Review generated by Ollama \(gemma3:4b\) • reviewbot v\d+\.\d+\.\d+ • 2025-01-15T10:30:45\.123Z$/);
    });

    it('should include version number from package.json', () => {
      const config: Config = {
        llmProvider: 'anthropic',
        anthropicApiKey: 'test-key',
        reviewLanguage: 'english',
      };

      const metadata = getReviewMetadata(config);

      expect(metadata).toContain('reviewbot v');
      expect(metadata).toMatch(/v\d+\.\d+\.\d+/);
    });

    it('should include ISO timestamp', () => {
      const config: Config = {
        llmProvider: 'anthropic',
        anthropicApiKey: 'test-key',
        reviewLanguage: 'english',
      };

      const metadata = getReviewMetadata(config);

      expect(metadata).toContain('2025-01-15T10:30:45.123Z');
    });

    it('should format metadata with bullet separators', () => {
      const config: Config = {
        llmProvider: 'anthropic',
        anthropicApiKey: 'test-key',
        reviewLanguage: 'english',
      };

      const metadata = getReviewMetadata(config);

      const parts = metadata.split(' • ');
      expect(parts).toHaveLength(3);
      expect(parts[0]).toContain('Review generated by');
      expect(parts[1]).toContain('reviewbot v');
      expect(parts[2]).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/);
    });

    it('should generate different timestamps for different calls', () => {
      const config: Config = {
        llmProvider: 'anthropic',
        anthropicApiKey: 'test-key',
        reviewLanguage: 'english',
      };

      const metadata1 = getReviewMetadata(config);

      // Advance time by 5 seconds
      jest.advanceTimersByTime(5000);

      const metadata2 = getReviewMetadata(config);

      expect(metadata1).not.toBe(metadata2);
      expect(metadata1).toContain('2025-01-15T10:30:45.123Z');
      expect(metadata2).toContain('2025-01-15T10:30:50.123Z');
    });

    it('should work with all supported languages', () => {
      const languages = ['english', 'korean', 'japanese', 'chinese'] as const;

      languages.forEach(language => {
        const config: Config = {
          llmProvider: 'anthropic',
          anthropicApiKey: 'test-key',
          reviewLanguage: language,
        };

        const metadata = getReviewMetadata(config);

        expect(metadata).toContain('Review generated by');
        expect(metadata).toContain('reviewbot v');
        expect(metadata).toContain('2025-01-15T10:30:45.123Z');
      });
    });

    it('should work with different Ollama models', () => {
      const models = ['llama2:7b', 'mistral:7b', 'gemma3:4b', 'codellama:13b'];

      models.forEach(model => {
        const config: Config = {
          llmProvider: 'ollama',
          ollamaEndpoint: 'http://localhost:11434',
          ollamaModel: model,
          reviewLanguage: 'english',
        };

        const metadata = getReviewMetadata(config);

        expect(metadata).toContain(`Ollama (${model})`);
      });
    });
  });
});
